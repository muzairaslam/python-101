---
title: "Introduction to Python"
subtitle: Week 3
format: revealjs
---


## One Announcement

- `Assignment 1` has been uploaded on  Google Classrooms.
- Due Date of Assignment is 8th November.
- Weightage of assignment is `10%`
- Please join the Google Classroom for Python Course.
- Walk through of the assignment.


## Last Week (Recap)

::: {.incremental}

- Introduced Floor Division in Python `//`
- Introduced Modulo Operator `%`
- We covered order of precedence. 
- We also saw how to test conditions in Python using: 
`if`, `elif`, `else` and nested conditions.
- Quick Quiz: What does `%` do in Python ?
- Quick Quiz: What is the order of precedence in Python ?

:::


## This Week

::: {.incremental}

- Commenting in Python
- Getting Information from User
- Our First Python Data Structure: **Lists**

:::

## Comments in Python

::: {.incremental}

- **Comments** are lines of text in your code that Python ignores.
- Comments are for the human, not the machine. For example, a comment can explain a section of code so another programmer can understand it.
- A comment can help you figure out your code when you come back to it a month
or a year later.
- To write comment a line in Python we use: `#` at the beginning of line.

:::

## Example 1 

```{python}
#| echo: true
#| output-location: fragment

# This is a comment.
# This is another comment.
# Python ignores these comments.
# The code that Python executes is next, on line

print("Hello, world!")
```

## Example 2: Multi line Comment


```{python}
#| echo: true
#| output-location: fragment

'''
This is a comment.
This is another comment.
Python ignores these comments.
The code that Python executes is next, on line
'''
print("Hello World!")

```


## Getting information from the user

::: {.incremental}

- Some times we will need to take input from the user in the code.
- The user will enter the data and our code will run on the input.
- To get user input in Python we use `input` function.

:::

## Examples

Check `user-input-demo.py` for examples 

## Let's get hands On !

<http://www.asmarterwaytolearn.com/python/14.html>
<http://www.asmarterwaytolearn.com/python/23.html>


## Solve in Jupyter Notebook or .py 

Q. Write a Python code which takes four inputs from user: 

1. Name
2. Age
3. Height (m)
4. Weight (Kg)

Then calculate the BMI of the person. The BMI is calculated as 

$$
BMI = Weight (Kg) / Height (m)
$$

**Print the following in Python:**

`Name` has `BMI` with `age` years of age.


## Lists 

### Getting the data


```{python}

#| echo: true
#| output-location: fragment

# defining a list
cities = [
  "Atlanta", 
  "Baltimore", 
  "Chicago", 
  "Denver", 
  "Los Angeles", 
  "Seattle"
  ]

# getting the first element from the list
print("Welcome to " + cities[0])

# getting the last element from the list
print("Welcome to " + cities[-1])

```


## Adding the data

### Appending the data
```{python}
#| echo: true
#| output-location: fragment


cities.append("New York")

print(cities)
```

### Inserting the data


```{python}
#| echo: true
#| output-location: fragment

cities.insert(1, "Karachi")

print(cities)
```


## Lists Slicing


```{python}
#| echo: true
#| output-location: fragment

cities = ["Atlanta", "Baltimore", "Chicago", 
"Denver", "Los Angeles", "Seattle"]
print(cities)

smaller_list_of_cities = cities[2:5]
print(smaller_list_of_cities)

# omitting first number
smaller_list_of_cities_2 = cities[:5]
print(smaller_list_of_cities_2)

# omitting last number
smaller_list_of_cities_3 = cities[2:]
print(smaller_list_of_cities_3)


```



## Lists Deletion

```{python}
#| echo: true
#| output-location: fragment

cities = ["Atlanta", "Baltimore", "Chicago", 
"Denver", "Los Angeles", "Seattle"]
print(cities)


del cities[3]
print(cities)

cities.remove("Los Angeles")
print(cities)
```


## Popping Elements

- Popping means to strike an element off a list but hang onto it for another purpose.

```{python}

#| echo: true
#| output-location: fragment

tasks = ["email Uzair", "call Ali", "meet with Zaid"]

# Pop the element from tasks to task_accomplished list

# Step 1: store the element in a variable
latest_task_accomplished = tasks.pop(1) 
print(latest_task_accomplished)

# Step 2: Create an empty list named task_accomplished_
tasks_accomplished = []

# Step 3: Append the variable to task_accomplished list
tasks_accomplished.append(latest_task_accomplished)
print(tasks_accomplished)

```

## Insertion to a known index in the list

```{python}
#| echo: true
#| output-location: fragment

tasks = ["email Uzair", "call Ali", "meet with Zaid"]

tasks_accomplished = ["call Ali"]

# Pop the second element of the tasks list
# And insert it to second element of tasks_accomplished list

tasks_accomplished.insert(2, tasks.pop(2))

print(tasks_accomplished)
```

## Let's get hands on!

::: {.incremental}

- lists creation: <http://www.asmarterwaytolearn.com/python/15.html>

- Adding and Changing Lists Elements: <http://www.asmarterwaytolearn.com/python/16.html>

- Slicing the lists: <http://www.asmarterwaytolearn.com/python/17.html>

- Deleting and Removing the elements: <http://www.asmarterwaytolearn.com/python/18.html>


- Popping elements: <http://www.asmarterwaytolearn.com/python/19.html>
:::

# Thank you